// Copyright 2016 Palantir Technologies, Inc. All rights reserved.
// Licensed under the terms of the LICENSE file distributed with this project.

@import "../../common/variables";
@import "../../common/icons";
@import "../../common/mixins";
@import "../button/common";

@mixin slider($size, $vertical: false) {
  $slider-min-size: $pt-grid-size * 15;

  position: relative;
  cursor: default;

  @if $vertical == false {
    width: 100%;
    min-width: $slider-min-size;
    height: $size;
  } @else {
    // define the same rules for both vertical as for horizontal to ensure all
    // horizontal rules are fully overridden.
    width: $size;
    min-width: $size;
    height: $slider-min-size;
  }

  &:hover {
    cursor: pointer;
  }

  &:active {
    cursor: grabbing;
  }

  &.pt-disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
}

@mixin slider-track($handle-size, $track-size, $vertical: false) {
  $slider-track-offset: ($handle-size - $track-size) / 2;

  position: absolute;
  border-radius: $pt-border-radius;
  background: rgba($gray1, 0.2);

  @if $vertical == false {
    top: $slider-track-offset;
    right: 0;
    left: 0;
    height: $track-size;
  } @else {
    top: 0;
    bottom: 0;
    left: $slider-track-offset;
    width: $track-size;
    height: auto; // override the non-vertical rule above
  }

  .pt-dark & {
    background: rgba($black, 0.5);
  }
}

@mixin slider-handle($handle-size, $track-size) {
  @include pt-button();
  position: absolute;
  top: 0;
  left: 0;
  border-radius: $pt-border-radius;
  box-shadow: $button-box-shadow-overlay;
  cursor: pointer;
  width: $handle-size;
  height: $handle-size;

  // ensure target handle's label always covers neighbors
  &:focus {
    z-index: 1;
  }

  &:hover {
    @include pt-button-hover();
    z-index: 2;
    box-shadow: $button-box-shadow-overlay;
    cursor: grab;
  }

  &.pt-active {
    @include pt-button-active();
    box-shadow: $button-box-shadow-overlay-active;
    cursor: grabbing;
  }

  .pt-disabled & {
    box-shadow: none;
    background: $gray5;
    // easy way to avoid lots of special cases to ignore mouse states when disabled:
    pointer-events: none;
  }

  .pt-dark & {
    @include pt-dark-button();

    &,
    &:hover {
      background-color: $dark-gray5;
    }

    &.pt-active {
      background-color: $dark-gray3;
    }
  }

  .pt-dark .pt-disabled & {
    border-color: $gray1;
    box-shadow: none;
    background: $gray1;
  }
}

@mixin slider-label($label-offset, $vertical: false) {
  display: inline-block;
  position: absolute;
  padding: ($pt-grid-size / 5) ($pt-grid-size / 2);
  vertical-align: top;
  line-height: 1;
  font-size: $pt-font-size-small;

  @if $vertical == false {
    transform: translate(-50%, $label-offset);
  } @else {
    transform: translate($label-offset, 50%);
  }
}
